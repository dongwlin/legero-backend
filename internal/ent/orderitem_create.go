// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dongwlin/legero-backend/internal/ent/orderitem"
)

// OrderItemCreate is the builder for creating a OrderItem entity.
type OrderItemCreate struct {
	config
	mutation *OrderItemMutation
	hooks    []Hook
}

// SetDailyID sets the "daily_id" field.
func (oic *OrderItemCreate) SetDailyID(u uint64) *OrderItemCreate {
	oic.mutation.SetDailyID(u)
	return oic
}

// SetIncludeNoodles sets the "include_noodles" field.
func (oic *OrderItemCreate) SetIncludeNoodles(b bool) *OrderItemCreate {
	oic.mutation.SetIncludeNoodles(b)
	return oic
}

// SetNillableIncludeNoodles sets the "include_noodles" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableIncludeNoodles(b *bool) *OrderItemCreate {
	if b != nil {
		oic.SetIncludeNoodles(*b)
	}
	return oic
}

// SetNoodleType sets the "noodle_type" field.
func (oic *OrderItemCreate) SetNoodleType(ot orderitem.NoodleType) *OrderItemCreate {
	oic.mutation.SetNoodleType(ot)
	return oic
}

// SetCustomNoodleType sets the "custom_noodle_type" field.
func (oic *OrderItemCreate) SetCustomNoodleType(s string) *OrderItemCreate {
	oic.mutation.SetCustomNoodleType(s)
	return oic
}

// SetNillableCustomNoodleType sets the "custom_noodle_type" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCustomNoodleType(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetCustomNoodleType(*s)
	}
	return oic
}

// SetNoodleAmount sets the "noodle_amount" field.
func (oic *OrderItemCreate) SetNoodleAmount(oa orderitem.NoodleAmount) *OrderItemCreate {
	oic.mutation.SetNoodleAmount(oa)
	return oic
}

// SetExtraNoodleBlocks sets the "extra_noodle_blocks" field.
func (oic *OrderItemCreate) SetExtraNoodleBlocks(i int) *OrderItemCreate {
	oic.mutation.SetExtraNoodleBlocks(i)
	return oic
}

// SetNillableExtraNoodleBlocks sets the "extra_noodle_blocks" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableExtraNoodleBlocks(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetExtraNoodleBlocks(*i)
	}
	return oic
}

// SetSize sets the "size" field.
func (oic *OrderItemCreate) SetSize(o orderitem.Size) *OrderItemCreate {
	oic.mutation.SetSize(o)
	return oic
}

// SetCustomSizePrice sets the "custom_size_price" field.
func (oic *OrderItemCreate) SetCustomSizePrice(f float64) *OrderItemCreate {
	oic.mutation.SetCustomSizePrice(f)
	return oic
}

// SetNillableCustomSizePrice sets the "custom_size_price" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCustomSizePrice(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetCustomSizePrice(*f)
	}
	return oic
}

// SetMeatAvailable sets the "meat_available" field.
func (oic *OrderItemCreate) SetMeatAvailable(s []string) *OrderItemCreate {
	oic.mutation.SetMeatAvailable(s)
	return oic
}

// SetMeatExcluded sets the "meat_excluded" field.
func (oic *OrderItemCreate) SetMeatExcluded(s []string) *OrderItemCreate {
	oic.mutation.SetMeatExcluded(s)
	return oic
}

// SetGreens sets the "greens" field.
func (oic *OrderItemCreate) SetGreens(o orderitem.Greens) *OrderItemCreate {
	oic.mutation.SetGreens(o)
	return oic
}

// SetScallion sets the "scallion" field.
func (oic *OrderItemCreate) SetScallion(o orderitem.Scallion) *OrderItemCreate {
	oic.mutation.SetScallion(o)
	return oic
}

// SetPepper sets the "pepper" field.
func (oic *OrderItemCreate) SetPepper(o orderitem.Pepper) *OrderItemCreate {
	oic.mutation.SetPepper(o)
	return oic
}

// SetDiningMethod sets the "dining_method" field.
func (oic *OrderItemCreate) SetDiningMethod(om orderitem.DiningMethod) *OrderItemCreate {
	oic.mutation.SetDiningMethod(om)
	return oic
}

// SetPackaging sets the "packaging" field.
func (oic *OrderItemCreate) SetPackaging(o orderitem.Packaging) *OrderItemCreate {
	oic.mutation.SetPackaging(o)
	return oic
}

// SetPackagingMethod sets the "packaging_method" field.
func (oic *OrderItemCreate) SetPackagingMethod(om orderitem.PackagingMethod) *OrderItemCreate {
	oic.mutation.SetPackagingMethod(om)
	return oic
}

// SetNote sets the "note" field.
func (oic *OrderItemCreate) SetNote(s string) *OrderItemCreate {
	oic.mutation.SetNote(s)
	return oic
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableNote(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetNote(*s)
	}
	return oic
}

// SetPrice sets the "price" field.
func (oic *OrderItemCreate) SetPrice(f float64) *OrderItemCreate {
	oic.mutation.SetPrice(f)
	return oic
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillablePrice(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetPrice(*f)
	}
	return oic
}

// SetProgressNoodles sets the "progress_noodles" field.
func (oic *OrderItemCreate) SetProgressNoodles(on orderitem.ProgressNoodles) *OrderItemCreate {
	oic.mutation.SetProgressNoodles(on)
	return oic
}

// SetProgressMeat sets the "progress_meat" field.
func (oic *OrderItemCreate) SetProgressMeat(om orderitem.ProgressMeat) *OrderItemCreate {
	oic.mutation.SetProgressMeat(om)
	return oic
}

// SetCompletedAt sets the "completed_at" field.
func (oic *OrderItemCreate) SetCompletedAt(t time.Time) *OrderItemCreate {
	oic.mutation.SetCompletedAt(t)
	return oic
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCompletedAt(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetCompletedAt(*t)
	}
	return oic
}

// SetCreatedAt sets the "created_at" field.
func (oic *OrderItemCreate) SetCreatedAt(t time.Time) *OrderItemCreate {
	oic.mutation.SetCreatedAt(t)
	return oic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCreatedAt(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetCreatedAt(*t)
	}
	return oic
}

// Mutation returns the OrderItemMutation object of the builder.
func (oic *OrderItemCreate) Mutation() *OrderItemMutation {
	return oic.mutation
}

// Save creates the OrderItem in the database.
func (oic *OrderItemCreate) Save(ctx context.Context) (*OrderItem, error) {
	oic.defaults()
	return withHooks(ctx, oic.sqlSave, oic.mutation, oic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oic *OrderItemCreate) SaveX(ctx context.Context) *OrderItem {
	v, err := oic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oic *OrderItemCreate) Exec(ctx context.Context) error {
	_, err := oic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oic *OrderItemCreate) ExecX(ctx context.Context) {
	if err := oic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oic *OrderItemCreate) defaults() {
	if _, ok := oic.mutation.IncludeNoodles(); !ok {
		v := orderitem.DefaultIncludeNoodles
		oic.mutation.SetIncludeNoodles(v)
	}
	if _, ok := oic.mutation.CustomNoodleType(); !ok {
		v := orderitem.DefaultCustomNoodleType
		oic.mutation.SetCustomNoodleType(v)
	}
	if _, ok := oic.mutation.ExtraNoodleBlocks(); !ok {
		v := orderitem.DefaultExtraNoodleBlocks
		oic.mutation.SetExtraNoodleBlocks(v)
	}
	if _, ok := oic.mutation.CustomSizePrice(); !ok {
		v := orderitem.DefaultCustomSizePrice
		oic.mutation.SetCustomSizePrice(v)
	}
	if _, ok := oic.mutation.MeatAvailable(); !ok {
		v := orderitem.DefaultMeatAvailable
		oic.mutation.SetMeatAvailable(v)
	}
	if _, ok := oic.mutation.MeatExcluded(); !ok {
		v := orderitem.DefaultMeatExcluded
		oic.mutation.SetMeatExcluded(v)
	}
	if _, ok := oic.mutation.Note(); !ok {
		v := orderitem.DefaultNote
		oic.mutation.SetNote(v)
	}
	if _, ok := oic.mutation.Price(); !ok {
		v := orderitem.DefaultPrice
		oic.mutation.SetPrice(v)
	}
	if _, ok := oic.mutation.CreatedAt(); !ok {
		v := orderitem.DefaultCreatedAt()
		oic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oic *OrderItemCreate) check() error {
	if _, ok := oic.mutation.DailyID(); !ok {
		return &ValidationError{Name: "daily_id", err: errors.New(`ent: missing required field "OrderItem.daily_id"`)}
	}
	if _, ok := oic.mutation.IncludeNoodles(); !ok {
		return &ValidationError{Name: "include_noodles", err: errors.New(`ent: missing required field "OrderItem.include_noodles"`)}
	}
	if _, ok := oic.mutation.NoodleType(); !ok {
		return &ValidationError{Name: "noodle_type", err: errors.New(`ent: missing required field "OrderItem.noodle_type"`)}
	}
	if v, ok := oic.mutation.NoodleType(); ok {
		if err := orderitem.NoodleTypeValidator(v); err != nil {
			return &ValidationError{Name: "noodle_type", err: fmt.Errorf(`ent: validator failed for field "OrderItem.noodle_type": %w`, err)}
		}
	}
	if _, ok := oic.mutation.CustomNoodleType(); !ok {
		return &ValidationError{Name: "custom_noodle_type", err: errors.New(`ent: missing required field "OrderItem.custom_noodle_type"`)}
	}
	if _, ok := oic.mutation.NoodleAmount(); !ok {
		return &ValidationError{Name: "noodle_amount", err: errors.New(`ent: missing required field "OrderItem.noodle_amount"`)}
	}
	if v, ok := oic.mutation.NoodleAmount(); ok {
		if err := orderitem.NoodleAmountValidator(v); err != nil {
			return &ValidationError{Name: "noodle_amount", err: fmt.Errorf(`ent: validator failed for field "OrderItem.noodle_amount": %w`, err)}
		}
	}
	if _, ok := oic.mutation.ExtraNoodleBlocks(); !ok {
		return &ValidationError{Name: "extra_noodle_blocks", err: errors.New(`ent: missing required field "OrderItem.extra_noodle_blocks"`)}
	}
	if _, ok := oic.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "OrderItem.size"`)}
	}
	if v, ok := oic.mutation.Size(); ok {
		if err := orderitem.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "OrderItem.size": %w`, err)}
		}
	}
	if _, ok := oic.mutation.CustomSizePrice(); !ok {
		return &ValidationError{Name: "custom_size_price", err: errors.New(`ent: missing required field "OrderItem.custom_size_price"`)}
	}
	if _, ok := oic.mutation.MeatAvailable(); !ok {
		return &ValidationError{Name: "meat_available", err: errors.New(`ent: missing required field "OrderItem.meat_available"`)}
	}
	if _, ok := oic.mutation.MeatExcluded(); !ok {
		return &ValidationError{Name: "meat_excluded", err: errors.New(`ent: missing required field "OrderItem.meat_excluded"`)}
	}
	if _, ok := oic.mutation.Greens(); !ok {
		return &ValidationError{Name: "greens", err: errors.New(`ent: missing required field "OrderItem.greens"`)}
	}
	if v, ok := oic.mutation.Greens(); ok {
		if err := orderitem.GreensValidator(v); err != nil {
			return &ValidationError{Name: "greens", err: fmt.Errorf(`ent: validator failed for field "OrderItem.greens": %w`, err)}
		}
	}
	if _, ok := oic.mutation.Scallion(); !ok {
		return &ValidationError{Name: "scallion", err: errors.New(`ent: missing required field "OrderItem.scallion"`)}
	}
	if v, ok := oic.mutation.Scallion(); ok {
		if err := orderitem.ScallionValidator(v); err != nil {
			return &ValidationError{Name: "scallion", err: fmt.Errorf(`ent: validator failed for field "OrderItem.scallion": %w`, err)}
		}
	}
	if _, ok := oic.mutation.Pepper(); !ok {
		return &ValidationError{Name: "pepper", err: errors.New(`ent: missing required field "OrderItem.pepper"`)}
	}
	if v, ok := oic.mutation.Pepper(); ok {
		if err := orderitem.PepperValidator(v); err != nil {
			return &ValidationError{Name: "pepper", err: fmt.Errorf(`ent: validator failed for field "OrderItem.pepper": %w`, err)}
		}
	}
	if _, ok := oic.mutation.DiningMethod(); !ok {
		return &ValidationError{Name: "dining_method", err: errors.New(`ent: missing required field "OrderItem.dining_method"`)}
	}
	if v, ok := oic.mutation.DiningMethod(); ok {
		if err := orderitem.DiningMethodValidator(v); err != nil {
			return &ValidationError{Name: "dining_method", err: fmt.Errorf(`ent: validator failed for field "OrderItem.dining_method": %w`, err)}
		}
	}
	if _, ok := oic.mutation.Packaging(); !ok {
		return &ValidationError{Name: "packaging", err: errors.New(`ent: missing required field "OrderItem.packaging"`)}
	}
	if v, ok := oic.mutation.Packaging(); ok {
		if err := orderitem.PackagingValidator(v); err != nil {
			return &ValidationError{Name: "packaging", err: fmt.Errorf(`ent: validator failed for field "OrderItem.packaging": %w`, err)}
		}
	}
	if _, ok := oic.mutation.PackagingMethod(); !ok {
		return &ValidationError{Name: "packaging_method", err: errors.New(`ent: missing required field "OrderItem.packaging_method"`)}
	}
	if v, ok := oic.mutation.PackagingMethod(); ok {
		if err := orderitem.PackagingMethodValidator(v); err != nil {
			return &ValidationError{Name: "packaging_method", err: fmt.Errorf(`ent: validator failed for field "OrderItem.packaging_method": %w`, err)}
		}
	}
	if _, ok := oic.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "OrderItem.note"`)}
	}
	if _, ok := oic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "OrderItem.price"`)}
	}
	if _, ok := oic.mutation.ProgressNoodles(); !ok {
		return &ValidationError{Name: "progress_noodles", err: errors.New(`ent: missing required field "OrderItem.progress_noodles"`)}
	}
	if v, ok := oic.mutation.ProgressNoodles(); ok {
		if err := orderitem.ProgressNoodlesValidator(v); err != nil {
			return &ValidationError{Name: "progress_noodles", err: fmt.Errorf(`ent: validator failed for field "OrderItem.progress_noodles": %w`, err)}
		}
	}
	if _, ok := oic.mutation.ProgressMeat(); !ok {
		return &ValidationError{Name: "progress_meat", err: errors.New(`ent: missing required field "OrderItem.progress_meat"`)}
	}
	if v, ok := oic.mutation.ProgressMeat(); ok {
		if err := orderitem.ProgressMeatValidator(v); err != nil {
			return &ValidationError{Name: "progress_meat", err: fmt.Errorf(`ent: validator failed for field "OrderItem.progress_meat": %w`, err)}
		}
	}
	if _, ok := oic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderItem.created_at"`)}
	}
	return nil
}

func (oic *OrderItemCreate) sqlSave(ctx context.Context) (*OrderItem, error) {
	if err := oic.check(); err != nil {
		return nil, err
	}
	_node, _spec := oic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	oic.mutation.id = &_node.ID
	oic.mutation.done = true
	return _node, nil
}

func (oic *OrderItemCreate) createSpec() (*OrderItem, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderItem{config: oic.config}
		_spec = sqlgraph.NewCreateSpec(orderitem.Table, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64))
	)
	if value, ok := oic.mutation.DailyID(); ok {
		_spec.SetField(orderitem.FieldDailyID, field.TypeUint64, value)
		_node.DailyID = value
	}
	if value, ok := oic.mutation.IncludeNoodles(); ok {
		_spec.SetField(orderitem.FieldIncludeNoodles, field.TypeBool, value)
		_node.IncludeNoodles = value
	}
	if value, ok := oic.mutation.NoodleType(); ok {
		_spec.SetField(orderitem.FieldNoodleType, field.TypeEnum, value)
		_node.NoodleType = value
	}
	if value, ok := oic.mutation.CustomNoodleType(); ok {
		_spec.SetField(orderitem.FieldCustomNoodleType, field.TypeString, value)
		_node.CustomNoodleType = value
	}
	if value, ok := oic.mutation.NoodleAmount(); ok {
		_spec.SetField(orderitem.FieldNoodleAmount, field.TypeEnum, value)
		_node.NoodleAmount = value
	}
	if value, ok := oic.mutation.ExtraNoodleBlocks(); ok {
		_spec.SetField(orderitem.FieldExtraNoodleBlocks, field.TypeInt, value)
		_node.ExtraNoodleBlocks = value
	}
	if value, ok := oic.mutation.Size(); ok {
		_spec.SetField(orderitem.FieldSize, field.TypeEnum, value)
		_node.Size = value
	}
	if value, ok := oic.mutation.CustomSizePrice(); ok {
		_spec.SetField(orderitem.FieldCustomSizePrice, field.TypeFloat64, value)
		_node.CustomSizePrice = value
	}
	if value, ok := oic.mutation.MeatAvailable(); ok {
		_spec.SetField(orderitem.FieldMeatAvailable, field.TypeJSON, value)
		_node.MeatAvailable = value
	}
	if value, ok := oic.mutation.MeatExcluded(); ok {
		_spec.SetField(orderitem.FieldMeatExcluded, field.TypeJSON, value)
		_node.MeatExcluded = value
	}
	if value, ok := oic.mutation.Greens(); ok {
		_spec.SetField(orderitem.FieldGreens, field.TypeEnum, value)
		_node.Greens = value
	}
	if value, ok := oic.mutation.Scallion(); ok {
		_spec.SetField(orderitem.FieldScallion, field.TypeEnum, value)
		_node.Scallion = value
	}
	if value, ok := oic.mutation.Pepper(); ok {
		_spec.SetField(orderitem.FieldPepper, field.TypeEnum, value)
		_node.Pepper = value
	}
	if value, ok := oic.mutation.DiningMethod(); ok {
		_spec.SetField(orderitem.FieldDiningMethod, field.TypeEnum, value)
		_node.DiningMethod = value
	}
	if value, ok := oic.mutation.Packaging(); ok {
		_spec.SetField(orderitem.FieldPackaging, field.TypeEnum, value)
		_node.Packaging = value
	}
	if value, ok := oic.mutation.PackagingMethod(); ok {
		_spec.SetField(orderitem.FieldPackagingMethod, field.TypeEnum, value)
		_node.PackagingMethod = value
	}
	if value, ok := oic.mutation.Note(); ok {
		_spec.SetField(orderitem.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := oic.mutation.Price(); ok {
		_spec.SetField(orderitem.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := oic.mutation.ProgressNoodles(); ok {
		_spec.SetField(orderitem.FieldProgressNoodles, field.TypeEnum, value)
		_node.ProgressNoodles = value
	}
	if value, ok := oic.mutation.ProgressMeat(); ok {
		_spec.SetField(orderitem.FieldProgressMeat, field.TypeEnum, value)
		_node.ProgressMeat = value
	}
	if value, ok := oic.mutation.CompletedAt(); ok {
		_spec.SetField(orderitem.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := oic.mutation.CreatedAt(); ok {
		_spec.SetField(orderitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OrderItemCreateBulk is the builder for creating many OrderItem entities in bulk.
type OrderItemCreateBulk struct {
	config
	err      error
	builders []*OrderItemCreate
}

// Save creates the OrderItem entities in the database.
func (oicb *OrderItemCreateBulk) Save(ctx context.Context) ([]*OrderItem, error) {
	if oicb.err != nil {
		return nil, oicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oicb.builders))
	nodes := make([]*OrderItem, len(oicb.builders))
	mutators := make([]Mutator, len(oicb.builders))
	for i := range oicb.builders {
		func(i int, root context.Context) {
			builder := oicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oicb *OrderItemCreateBulk) SaveX(ctx context.Context) []*OrderItem {
	v, err := oicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oicb *OrderItemCreateBulk) Exec(ctx context.Context) error {
	_, err := oicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oicb *OrderItemCreateBulk) ExecX(ctx context.Context) {
	if err := oicb.Exec(ctx); err != nil {
		panic(err)
	}
}
