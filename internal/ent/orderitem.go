// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dongwlin/legero-backend/internal/ent/orderitem"
)

// OrderItem is the model entity for the OrderItem schema.
type OrderItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// DailyID holds the value of the "daily_id" field.
	DailyID uint64 `json:"daily_id,omitempty"`
	// IncludeNoodles holds the value of the "include_noodles" field.
	IncludeNoodles bool `json:"include_noodles,omitempty"`
	// NoodleType holds the value of the "noodle_type" field.
	NoodleType orderitem.NoodleType `json:"noodle_type,omitempty"`
	// CustomNoodleType holds the value of the "custom_noodle_type" field.
	CustomNoodleType string `json:"custom_noodle_type,omitempty"`
	// NoodleAmount holds the value of the "noodle_amount" field.
	NoodleAmount orderitem.NoodleAmount `json:"noodle_amount,omitempty"`
	// ExtraNoodleBlocks holds the value of the "extra_noodle_blocks" field.
	ExtraNoodleBlocks int `json:"extra_noodle_blocks,omitempty"`
	// Size holds the value of the "size" field.
	Size orderitem.Size `json:"size,omitempty"`
	// CustomSizePrice holds the value of the "custom_size_price" field.
	CustomSizePrice float64 `json:"custom_size_price,omitempty"`
	// MeatAvailable holds the value of the "meat_available" field.
	MeatAvailable []string `json:"meat_available,omitempty"`
	// MeatExcluded holds the value of the "meat_excluded" field.
	MeatExcluded []string `json:"meat_excluded,omitempty"`
	// Greens holds the value of the "greens" field.
	Greens orderitem.Greens `json:"greens,omitempty"`
	// Scallion holds the value of the "scallion" field.
	Scallion orderitem.Scallion `json:"scallion,omitempty"`
	// Pepper holds the value of the "pepper" field.
	Pepper orderitem.Pepper `json:"pepper,omitempty"`
	// DiningMethod holds the value of the "dining_method" field.
	DiningMethod orderitem.DiningMethod `json:"dining_method,omitempty"`
	// Packaging holds the value of the "packaging" field.
	Packaging orderitem.Packaging `json:"packaging,omitempty"`
	// PackagingMethod holds the value of the "packaging_method" field.
	PackagingMethod orderitem.PackagingMethod `json:"packaging_method,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// ProgressNoodles holds the value of the "progress_noodles" field.
	ProgressNoodles orderitem.ProgressNoodles `json:"progress_noodles,omitempty"`
	// ProgressMeat holds the value of the "progress_meat" field.
	ProgressMeat orderitem.ProgressMeat `json:"progress_meat,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderitem.FieldMeatAvailable, orderitem.FieldMeatExcluded:
			values[i] = new([]byte)
		case orderitem.FieldIncludeNoodles:
			values[i] = new(sql.NullBool)
		case orderitem.FieldCustomSizePrice, orderitem.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case orderitem.FieldID, orderitem.FieldDailyID, orderitem.FieldExtraNoodleBlocks:
			values[i] = new(sql.NullInt64)
		case orderitem.FieldNoodleType, orderitem.FieldCustomNoodleType, orderitem.FieldNoodleAmount, orderitem.FieldSize, orderitem.FieldGreens, orderitem.FieldScallion, orderitem.FieldPepper, orderitem.FieldDiningMethod, orderitem.FieldPackaging, orderitem.FieldPackagingMethod, orderitem.FieldNote, orderitem.FieldProgressNoodles, orderitem.FieldProgressMeat:
			values[i] = new(sql.NullString)
		case orderitem.FieldCompletedAt, orderitem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderItem fields.
func (oi *OrderItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oi.ID = uint64(value.Int64)
		case orderitem.FieldDailyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_id", values[i])
			} else if value.Valid {
				oi.DailyID = uint64(value.Int64)
			}
		case orderitem.FieldIncludeNoodles:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field include_noodles", values[i])
			} else if value.Valid {
				oi.IncludeNoodles = value.Bool
			}
		case orderitem.FieldNoodleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field noodle_type", values[i])
			} else if value.Valid {
				oi.NoodleType = orderitem.NoodleType(value.String)
			}
		case orderitem.FieldCustomNoodleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_noodle_type", values[i])
			} else if value.Valid {
				oi.CustomNoodleType = value.String
			}
		case orderitem.FieldNoodleAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field noodle_amount", values[i])
			} else if value.Valid {
				oi.NoodleAmount = orderitem.NoodleAmount(value.String)
			}
		case orderitem.FieldExtraNoodleBlocks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extra_noodle_blocks", values[i])
			} else if value.Valid {
				oi.ExtraNoodleBlocks = int(value.Int64)
			}
		case orderitem.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				oi.Size = orderitem.Size(value.String)
			}
		case orderitem.FieldCustomSizePrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field custom_size_price", values[i])
			} else if value.Valid {
				oi.CustomSizePrice = value.Float64
			}
		case orderitem.FieldMeatAvailable:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meat_available", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oi.MeatAvailable); err != nil {
					return fmt.Errorf("unmarshal field meat_available: %w", err)
				}
			}
		case orderitem.FieldMeatExcluded:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meat_excluded", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oi.MeatExcluded); err != nil {
					return fmt.Errorf("unmarshal field meat_excluded: %w", err)
				}
			}
		case orderitem.FieldGreens:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field greens", values[i])
			} else if value.Valid {
				oi.Greens = orderitem.Greens(value.String)
			}
		case orderitem.FieldScallion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scallion", values[i])
			} else if value.Valid {
				oi.Scallion = orderitem.Scallion(value.String)
			}
		case orderitem.FieldPepper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pepper", values[i])
			} else if value.Valid {
				oi.Pepper = orderitem.Pepper(value.String)
			}
		case orderitem.FieldDiningMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dining_method", values[i])
			} else if value.Valid {
				oi.DiningMethod = orderitem.DiningMethod(value.String)
			}
		case orderitem.FieldPackaging:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field packaging", values[i])
			} else if value.Valid {
				oi.Packaging = orderitem.Packaging(value.String)
			}
		case orderitem.FieldPackagingMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field packaging_method", values[i])
			} else if value.Valid {
				oi.PackagingMethod = orderitem.PackagingMethod(value.String)
			}
		case orderitem.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				oi.Note = value.String
			}
		case orderitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				oi.Price = value.Float64
			}
		case orderitem.FieldProgressNoodles:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field progress_noodles", values[i])
			} else if value.Valid {
				oi.ProgressNoodles = orderitem.ProgressNoodles(value.String)
			}
		case orderitem.FieldProgressMeat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field progress_meat", values[i])
			} else if value.Valid {
				oi.ProgressMeat = orderitem.ProgressMeat(value.String)
			}
		case orderitem.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				oi.CompletedAt = value.Time
			}
		case orderitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oi.CreatedAt = value.Time
			}
		default:
			oi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderItem.
// This includes values selected through modifiers, order, etc.
func (oi *OrderItem) Value(name string) (ent.Value, error) {
	return oi.selectValues.Get(name)
}

// Update returns a builder for updating this OrderItem.
// Note that you need to call OrderItem.Unwrap() before calling this method if this OrderItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (oi *OrderItem) Update() *OrderItemUpdateOne {
	return NewOrderItemClient(oi.config).UpdateOne(oi)
}

// Unwrap unwraps the OrderItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oi *OrderItem) Unwrap() *OrderItem {
	_tx, ok := oi.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderItem is not a transactional entity")
	}
	oi.config.driver = _tx.drv
	return oi
}

// String implements the fmt.Stringer.
func (oi *OrderItem) String() string {
	var builder strings.Builder
	builder.WriteString("OrderItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oi.ID))
	builder.WriteString("daily_id=")
	builder.WriteString(fmt.Sprintf("%v", oi.DailyID))
	builder.WriteString(", ")
	builder.WriteString("include_noodles=")
	builder.WriteString(fmt.Sprintf("%v", oi.IncludeNoodles))
	builder.WriteString(", ")
	builder.WriteString("noodle_type=")
	builder.WriteString(fmt.Sprintf("%v", oi.NoodleType))
	builder.WriteString(", ")
	builder.WriteString("custom_noodle_type=")
	builder.WriteString(oi.CustomNoodleType)
	builder.WriteString(", ")
	builder.WriteString("noodle_amount=")
	builder.WriteString(fmt.Sprintf("%v", oi.NoodleAmount))
	builder.WriteString(", ")
	builder.WriteString("extra_noodle_blocks=")
	builder.WriteString(fmt.Sprintf("%v", oi.ExtraNoodleBlocks))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", oi.Size))
	builder.WriteString(", ")
	builder.WriteString("custom_size_price=")
	builder.WriteString(fmt.Sprintf("%v", oi.CustomSizePrice))
	builder.WriteString(", ")
	builder.WriteString("meat_available=")
	builder.WriteString(fmt.Sprintf("%v", oi.MeatAvailable))
	builder.WriteString(", ")
	builder.WriteString("meat_excluded=")
	builder.WriteString(fmt.Sprintf("%v", oi.MeatExcluded))
	builder.WriteString(", ")
	builder.WriteString("greens=")
	builder.WriteString(fmt.Sprintf("%v", oi.Greens))
	builder.WriteString(", ")
	builder.WriteString("scallion=")
	builder.WriteString(fmt.Sprintf("%v", oi.Scallion))
	builder.WriteString(", ")
	builder.WriteString("pepper=")
	builder.WriteString(fmt.Sprintf("%v", oi.Pepper))
	builder.WriteString(", ")
	builder.WriteString("dining_method=")
	builder.WriteString(fmt.Sprintf("%v", oi.DiningMethod))
	builder.WriteString(", ")
	builder.WriteString("packaging=")
	builder.WriteString(fmt.Sprintf("%v", oi.Packaging))
	builder.WriteString(", ")
	builder.WriteString("packaging_method=")
	builder.WriteString(fmt.Sprintf("%v", oi.PackagingMethod))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(oi.Note)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", oi.Price))
	builder.WriteString(", ")
	builder.WriteString("progress_noodles=")
	builder.WriteString(fmt.Sprintf("%v", oi.ProgressNoodles))
	builder.WriteString(", ")
	builder.WriteString("progress_meat=")
	builder.WriteString(fmt.Sprintf("%v", oi.ProgressMeat))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(oi.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oi.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderItems is a parsable slice of OrderItem.
type OrderItems []*OrderItem
