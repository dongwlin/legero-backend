// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dongwlin/legero-backend/internal/ent/orderitem"
	"github.com/dongwlin/legero-backend/internal/ent/predicate"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemMutation
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiu *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetDailyID sets the "daily_id" field.
func (oiu *OrderItemUpdate) SetDailyID(u uint64) *OrderItemUpdate {
	oiu.mutation.ResetDailyID()
	oiu.mutation.SetDailyID(u)
	return oiu
}

// SetNillableDailyID sets the "daily_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDailyID(u *uint64) *OrderItemUpdate {
	if u != nil {
		oiu.SetDailyID(*u)
	}
	return oiu
}

// AddDailyID adds u to the "daily_id" field.
func (oiu *OrderItemUpdate) AddDailyID(u int64) *OrderItemUpdate {
	oiu.mutation.AddDailyID(u)
	return oiu
}

// SetIncludeNoodles sets the "include_noodles" field.
func (oiu *OrderItemUpdate) SetIncludeNoodles(b bool) *OrderItemUpdate {
	oiu.mutation.SetIncludeNoodles(b)
	return oiu
}

// SetNillableIncludeNoodles sets the "include_noodles" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableIncludeNoodles(b *bool) *OrderItemUpdate {
	if b != nil {
		oiu.SetIncludeNoodles(*b)
	}
	return oiu
}

// SetNoodleType sets the "noodle_type" field.
func (oiu *OrderItemUpdate) SetNoodleType(ot orderitem.NoodleType) *OrderItemUpdate {
	oiu.mutation.SetNoodleType(ot)
	return oiu
}

// SetNillableNoodleType sets the "noodle_type" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableNoodleType(ot *orderitem.NoodleType) *OrderItemUpdate {
	if ot != nil {
		oiu.SetNoodleType(*ot)
	}
	return oiu
}

// SetCustomNoodleType sets the "custom_noodle_type" field.
func (oiu *OrderItemUpdate) SetCustomNoodleType(s string) *OrderItemUpdate {
	oiu.mutation.SetCustomNoodleType(s)
	return oiu
}

// SetNillableCustomNoodleType sets the "custom_noodle_type" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCustomNoodleType(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetCustomNoodleType(*s)
	}
	return oiu
}

// SetNoodleAmount sets the "noodle_amount" field.
func (oiu *OrderItemUpdate) SetNoodleAmount(oa orderitem.NoodleAmount) *OrderItemUpdate {
	oiu.mutation.SetNoodleAmount(oa)
	return oiu
}

// SetNillableNoodleAmount sets the "noodle_amount" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableNoodleAmount(oa *orderitem.NoodleAmount) *OrderItemUpdate {
	if oa != nil {
		oiu.SetNoodleAmount(*oa)
	}
	return oiu
}

// SetExtraNoodleBlocks sets the "extra_noodle_blocks" field.
func (oiu *OrderItemUpdate) SetExtraNoodleBlocks(i int) *OrderItemUpdate {
	oiu.mutation.ResetExtraNoodleBlocks()
	oiu.mutation.SetExtraNoodleBlocks(i)
	return oiu
}

// SetNillableExtraNoodleBlocks sets the "extra_noodle_blocks" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableExtraNoodleBlocks(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetExtraNoodleBlocks(*i)
	}
	return oiu
}

// AddExtraNoodleBlocks adds i to the "extra_noodle_blocks" field.
func (oiu *OrderItemUpdate) AddExtraNoodleBlocks(i int) *OrderItemUpdate {
	oiu.mutation.AddExtraNoodleBlocks(i)
	return oiu
}

// SetSize sets the "size" field.
func (oiu *OrderItemUpdate) SetSize(o orderitem.Size) *OrderItemUpdate {
	oiu.mutation.SetSize(o)
	return oiu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSize(o *orderitem.Size) *OrderItemUpdate {
	if o != nil {
		oiu.SetSize(*o)
	}
	return oiu
}

// SetCustomSizePrice sets the "custom_size_price" field.
func (oiu *OrderItemUpdate) SetCustomSizePrice(f float64) *OrderItemUpdate {
	oiu.mutation.ResetCustomSizePrice()
	oiu.mutation.SetCustomSizePrice(f)
	return oiu
}

// SetNillableCustomSizePrice sets the "custom_size_price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCustomSizePrice(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetCustomSizePrice(*f)
	}
	return oiu
}

// AddCustomSizePrice adds f to the "custom_size_price" field.
func (oiu *OrderItemUpdate) AddCustomSizePrice(f float64) *OrderItemUpdate {
	oiu.mutation.AddCustomSizePrice(f)
	return oiu
}

// SetMeatAvailable sets the "meat_available" field.
func (oiu *OrderItemUpdate) SetMeatAvailable(s []string) *OrderItemUpdate {
	oiu.mutation.SetMeatAvailable(s)
	return oiu
}

// AppendMeatAvailable appends s to the "meat_available" field.
func (oiu *OrderItemUpdate) AppendMeatAvailable(s []string) *OrderItemUpdate {
	oiu.mutation.AppendMeatAvailable(s)
	return oiu
}

// SetMeatExcluded sets the "meat_excluded" field.
func (oiu *OrderItemUpdate) SetMeatExcluded(s []string) *OrderItemUpdate {
	oiu.mutation.SetMeatExcluded(s)
	return oiu
}

// AppendMeatExcluded appends s to the "meat_excluded" field.
func (oiu *OrderItemUpdate) AppendMeatExcluded(s []string) *OrderItemUpdate {
	oiu.mutation.AppendMeatExcluded(s)
	return oiu
}

// SetGreens sets the "greens" field.
func (oiu *OrderItemUpdate) SetGreens(o orderitem.Greens) *OrderItemUpdate {
	oiu.mutation.SetGreens(o)
	return oiu
}

// SetNillableGreens sets the "greens" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableGreens(o *orderitem.Greens) *OrderItemUpdate {
	if o != nil {
		oiu.SetGreens(*o)
	}
	return oiu
}

// SetScallion sets the "scallion" field.
func (oiu *OrderItemUpdate) SetScallion(o orderitem.Scallion) *OrderItemUpdate {
	oiu.mutation.SetScallion(o)
	return oiu
}

// SetNillableScallion sets the "scallion" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableScallion(o *orderitem.Scallion) *OrderItemUpdate {
	if o != nil {
		oiu.SetScallion(*o)
	}
	return oiu
}

// SetPepper sets the "pepper" field.
func (oiu *OrderItemUpdate) SetPepper(o orderitem.Pepper) *OrderItemUpdate {
	oiu.mutation.SetPepper(o)
	return oiu
}

// SetNillablePepper sets the "pepper" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillablePepper(o *orderitem.Pepper) *OrderItemUpdate {
	if o != nil {
		oiu.SetPepper(*o)
	}
	return oiu
}

// SetDiningMethod sets the "dining_method" field.
func (oiu *OrderItemUpdate) SetDiningMethod(om orderitem.DiningMethod) *OrderItemUpdate {
	oiu.mutation.SetDiningMethod(om)
	return oiu
}

// SetNillableDiningMethod sets the "dining_method" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDiningMethod(om *orderitem.DiningMethod) *OrderItemUpdate {
	if om != nil {
		oiu.SetDiningMethod(*om)
	}
	return oiu
}

// SetPackaging sets the "packaging" field.
func (oiu *OrderItemUpdate) SetPackaging(o orderitem.Packaging) *OrderItemUpdate {
	oiu.mutation.SetPackaging(o)
	return oiu
}

// SetNillablePackaging sets the "packaging" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillablePackaging(o *orderitem.Packaging) *OrderItemUpdate {
	if o != nil {
		oiu.SetPackaging(*o)
	}
	return oiu
}

// SetPackagingMethod sets the "packaging_method" field.
func (oiu *OrderItemUpdate) SetPackagingMethod(om orderitem.PackagingMethod) *OrderItemUpdate {
	oiu.mutation.SetPackagingMethod(om)
	return oiu
}

// SetNillablePackagingMethod sets the "packaging_method" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillablePackagingMethod(om *orderitem.PackagingMethod) *OrderItemUpdate {
	if om != nil {
		oiu.SetPackagingMethod(*om)
	}
	return oiu
}

// SetNote sets the "note" field.
func (oiu *OrderItemUpdate) SetNote(s string) *OrderItemUpdate {
	oiu.mutation.SetNote(s)
	return oiu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableNote(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetNote(*s)
	}
	return oiu
}

// SetPrice sets the "price" field.
func (oiu *OrderItemUpdate) SetPrice(f float64) *OrderItemUpdate {
	oiu.mutation.ResetPrice()
	oiu.mutation.SetPrice(f)
	return oiu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillablePrice(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetPrice(*f)
	}
	return oiu
}

// AddPrice adds f to the "price" field.
func (oiu *OrderItemUpdate) AddPrice(f float64) *OrderItemUpdate {
	oiu.mutation.AddPrice(f)
	return oiu
}

// SetProgressNoodles sets the "progress_noodles" field.
func (oiu *OrderItemUpdate) SetProgressNoodles(on orderitem.ProgressNoodles) *OrderItemUpdate {
	oiu.mutation.SetProgressNoodles(on)
	return oiu
}

// SetNillableProgressNoodles sets the "progress_noodles" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProgressNoodles(on *orderitem.ProgressNoodles) *OrderItemUpdate {
	if on != nil {
		oiu.SetProgressNoodles(*on)
	}
	return oiu
}

// SetProgressMeat sets the "progress_meat" field.
func (oiu *OrderItemUpdate) SetProgressMeat(om orderitem.ProgressMeat) *OrderItemUpdate {
	oiu.mutation.SetProgressMeat(om)
	return oiu
}

// SetNillableProgressMeat sets the "progress_meat" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProgressMeat(om *orderitem.ProgressMeat) *OrderItemUpdate {
	if om != nil {
		oiu.SetProgressMeat(*om)
	}
	return oiu
}

// SetCompletedAt sets the "completed_at" field.
func (oiu *OrderItemUpdate) SetCompletedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetCompletedAt(t)
	return oiu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCompletedAt(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetCompletedAt(*t)
	}
	return oiu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (oiu *OrderItemUpdate) ClearCompletedAt() *OrderItemUpdate {
	oiu.mutation.ClearCompletedAt()
	return oiu
}

// SetCreatedAt sets the "created_at" field.
func (oiu *OrderItemUpdate) SetCreatedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetCreatedAt(t)
	return oiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCreatedAt(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetCreatedAt(*t)
	}
	return oiu
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiu *OrderItemUpdate) Mutation() *OrderItemMutation {
	return oiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oiu.sqlSave, oiu.mutation, oiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OrderItemUpdate) check() error {
	if v, ok := oiu.mutation.NoodleType(); ok {
		if err := orderitem.NoodleTypeValidator(v); err != nil {
			return &ValidationError{Name: "noodle_type", err: fmt.Errorf(`ent: validator failed for field "OrderItem.noodle_type": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.NoodleAmount(); ok {
		if err := orderitem.NoodleAmountValidator(v); err != nil {
			return &ValidationError{Name: "noodle_amount", err: fmt.Errorf(`ent: validator failed for field "OrderItem.noodle_amount": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.Size(); ok {
		if err := orderitem.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "OrderItem.size": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.Greens(); ok {
		if err := orderitem.GreensValidator(v); err != nil {
			return &ValidationError{Name: "greens", err: fmt.Errorf(`ent: validator failed for field "OrderItem.greens": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.Scallion(); ok {
		if err := orderitem.ScallionValidator(v); err != nil {
			return &ValidationError{Name: "scallion", err: fmt.Errorf(`ent: validator failed for field "OrderItem.scallion": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.Pepper(); ok {
		if err := orderitem.PepperValidator(v); err != nil {
			return &ValidationError{Name: "pepper", err: fmt.Errorf(`ent: validator failed for field "OrderItem.pepper": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.DiningMethod(); ok {
		if err := orderitem.DiningMethodValidator(v); err != nil {
			return &ValidationError{Name: "dining_method", err: fmt.Errorf(`ent: validator failed for field "OrderItem.dining_method": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.Packaging(); ok {
		if err := orderitem.PackagingValidator(v); err != nil {
			return &ValidationError{Name: "packaging", err: fmt.Errorf(`ent: validator failed for field "OrderItem.packaging": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.PackagingMethod(); ok {
		if err := orderitem.PackagingMethodValidator(v); err != nil {
			return &ValidationError{Name: "packaging_method", err: fmt.Errorf(`ent: validator failed for field "OrderItem.packaging_method": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.ProgressNoodles(); ok {
		if err := orderitem.ProgressNoodlesValidator(v); err != nil {
			return &ValidationError{Name: "progress_noodles", err: fmt.Errorf(`ent: validator failed for field "OrderItem.progress_noodles": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.ProgressMeat(); ok {
		if err := orderitem.ProgressMeatValidator(v); err != nil {
			return &ValidationError{Name: "progress_meat", err: fmt.Errorf(`ent: validator failed for field "OrderItem.progress_meat": %w`, err)}
		}
	}
	return nil
}

func (oiu *OrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderitem.Table, orderitem.Columns, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64))
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.DailyID(); ok {
		_spec.SetField(orderitem.FieldDailyID, field.TypeUint64, value)
	}
	if value, ok := oiu.mutation.AddedDailyID(); ok {
		_spec.AddField(orderitem.FieldDailyID, field.TypeUint64, value)
	}
	if value, ok := oiu.mutation.IncludeNoodles(); ok {
		_spec.SetField(orderitem.FieldIncludeNoodles, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.NoodleType(); ok {
		_spec.SetField(orderitem.FieldNoodleType, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.CustomNoodleType(); ok {
		_spec.SetField(orderitem.FieldCustomNoodleType, field.TypeString, value)
	}
	if value, ok := oiu.mutation.NoodleAmount(); ok {
		_spec.SetField(orderitem.FieldNoodleAmount, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.ExtraNoodleBlocks(); ok {
		_spec.SetField(orderitem.FieldExtraNoodleBlocks, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedExtraNoodleBlocks(); ok {
		_spec.AddField(orderitem.FieldExtraNoodleBlocks, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.Size(); ok {
		_spec.SetField(orderitem.FieldSize, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.CustomSizePrice(); ok {
		_spec.SetField(orderitem.FieldCustomSizePrice, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedCustomSizePrice(); ok {
		_spec.AddField(orderitem.FieldCustomSizePrice, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.MeatAvailable(); ok {
		_spec.SetField(orderitem.FieldMeatAvailable, field.TypeJSON, value)
	}
	if value, ok := oiu.mutation.AppendedMeatAvailable(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orderitem.FieldMeatAvailable, value)
		})
	}
	if value, ok := oiu.mutation.MeatExcluded(); ok {
		_spec.SetField(orderitem.FieldMeatExcluded, field.TypeJSON, value)
	}
	if value, ok := oiu.mutation.AppendedMeatExcluded(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orderitem.FieldMeatExcluded, value)
		})
	}
	if value, ok := oiu.mutation.Greens(); ok {
		_spec.SetField(orderitem.FieldGreens, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.Scallion(); ok {
		_spec.SetField(orderitem.FieldScallion, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.Pepper(); ok {
		_spec.SetField(orderitem.FieldPepper, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.DiningMethod(); ok {
		_spec.SetField(orderitem.FieldDiningMethod, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.Packaging(); ok {
		_spec.SetField(orderitem.FieldPackaging, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.PackagingMethod(); ok {
		_spec.SetField(orderitem.FieldPackagingMethod, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.Note(); ok {
		_spec.SetField(orderitem.FieldNote, field.TypeString, value)
	}
	if value, ok := oiu.mutation.Price(); ok {
		_spec.SetField(orderitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedPrice(); ok {
		_spec.AddField(orderitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.ProgressNoodles(); ok {
		_spec.SetField(orderitem.FieldProgressNoodles, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.ProgressMeat(); ok {
		_spec.SetField(orderitem.FieldProgressMeat, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.CompletedAt(); ok {
		_spec.SetField(orderitem.FieldCompletedAt, field.TypeTime, value)
	}
	if oiu.mutation.CompletedAtCleared() {
		_spec.ClearField(orderitem.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := oiu.mutation.CreatedAt(); ok {
		_spec.SetField(orderitem.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oiu.mutation.done = true
	return n, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemMutation
}

// SetDailyID sets the "daily_id" field.
func (oiuo *OrderItemUpdateOne) SetDailyID(u uint64) *OrderItemUpdateOne {
	oiuo.mutation.ResetDailyID()
	oiuo.mutation.SetDailyID(u)
	return oiuo
}

// SetNillableDailyID sets the "daily_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDailyID(u *uint64) *OrderItemUpdateOne {
	if u != nil {
		oiuo.SetDailyID(*u)
	}
	return oiuo
}

// AddDailyID adds u to the "daily_id" field.
func (oiuo *OrderItemUpdateOne) AddDailyID(u int64) *OrderItemUpdateOne {
	oiuo.mutation.AddDailyID(u)
	return oiuo
}

// SetIncludeNoodles sets the "include_noodles" field.
func (oiuo *OrderItemUpdateOne) SetIncludeNoodles(b bool) *OrderItemUpdateOne {
	oiuo.mutation.SetIncludeNoodles(b)
	return oiuo
}

// SetNillableIncludeNoodles sets the "include_noodles" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableIncludeNoodles(b *bool) *OrderItemUpdateOne {
	if b != nil {
		oiuo.SetIncludeNoodles(*b)
	}
	return oiuo
}

// SetNoodleType sets the "noodle_type" field.
func (oiuo *OrderItemUpdateOne) SetNoodleType(ot orderitem.NoodleType) *OrderItemUpdateOne {
	oiuo.mutation.SetNoodleType(ot)
	return oiuo
}

// SetNillableNoodleType sets the "noodle_type" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableNoodleType(ot *orderitem.NoodleType) *OrderItemUpdateOne {
	if ot != nil {
		oiuo.SetNoodleType(*ot)
	}
	return oiuo
}

// SetCustomNoodleType sets the "custom_noodle_type" field.
func (oiuo *OrderItemUpdateOne) SetCustomNoodleType(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetCustomNoodleType(s)
	return oiuo
}

// SetNillableCustomNoodleType sets the "custom_noodle_type" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCustomNoodleType(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetCustomNoodleType(*s)
	}
	return oiuo
}

// SetNoodleAmount sets the "noodle_amount" field.
func (oiuo *OrderItemUpdateOne) SetNoodleAmount(oa orderitem.NoodleAmount) *OrderItemUpdateOne {
	oiuo.mutation.SetNoodleAmount(oa)
	return oiuo
}

// SetNillableNoodleAmount sets the "noodle_amount" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableNoodleAmount(oa *orderitem.NoodleAmount) *OrderItemUpdateOne {
	if oa != nil {
		oiuo.SetNoodleAmount(*oa)
	}
	return oiuo
}

// SetExtraNoodleBlocks sets the "extra_noodle_blocks" field.
func (oiuo *OrderItemUpdateOne) SetExtraNoodleBlocks(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetExtraNoodleBlocks()
	oiuo.mutation.SetExtraNoodleBlocks(i)
	return oiuo
}

// SetNillableExtraNoodleBlocks sets the "extra_noodle_blocks" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableExtraNoodleBlocks(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetExtraNoodleBlocks(*i)
	}
	return oiuo
}

// AddExtraNoodleBlocks adds i to the "extra_noodle_blocks" field.
func (oiuo *OrderItemUpdateOne) AddExtraNoodleBlocks(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddExtraNoodleBlocks(i)
	return oiuo
}

// SetSize sets the "size" field.
func (oiuo *OrderItemUpdateOne) SetSize(o orderitem.Size) *OrderItemUpdateOne {
	oiuo.mutation.SetSize(o)
	return oiuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSize(o *orderitem.Size) *OrderItemUpdateOne {
	if o != nil {
		oiuo.SetSize(*o)
	}
	return oiuo
}

// SetCustomSizePrice sets the "custom_size_price" field.
func (oiuo *OrderItemUpdateOne) SetCustomSizePrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetCustomSizePrice()
	oiuo.mutation.SetCustomSizePrice(f)
	return oiuo
}

// SetNillableCustomSizePrice sets the "custom_size_price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCustomSizePrice(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetCustomSizePrice(*f)
	}
	return oiuo
}

// AddCustomSizePrice adds f to the "custom_size_price" field.
func (oiuo *OrderItemUpdateOne) AddCustomSizePrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddCustomSizePrice(f)
	return oiuo
}

// SetMeatAvailable sets the "meat_available" field.
func (oiuo *OrderItemUpdateOne) SetMeatAvailable(s []string) *OrderItemUpdateOne {
	oiuo.mutation.SetMeatAvailable(s)
	return oiuo
}

// AppendMeatAvailable appends s to the "meat_available" field.
func (oiuo *OrderItemUpdateOne) AppendMeatAvailable(s []string) *OrderItemUpdateOne {
	oiuo.mutation.AppendMeatAvailable(s)
	return oiuo
}

// SetMeatExcluded sets the "meat_excluded" field.
func (oiuo *OrderItemUpdateOne) SetMeatExcluded(s []string) *OrderItemUpdateOne {
	oiuo.mutation.SetMeatExcluded(s)
	return oiuo
}

// AppendMeatExcluded appends s to the "meat_excluded" field.
func (oiuo *OrderItemUpdateOne) AppendMeatExcluded(s []string) *OrderItemUpdateOne {
	oiuo.mutation.AppendMeatExcluded(s)
	return oiuo
}

// SetGreens sets the "greens" field.
func (oiuo *OrderItemUpdateOne) SetGreens(o orderitem.Greens) *OrderItemUpdateOne {
	oiuo.mutation.SetGreens(o)
	return oiuo
}

// SetNillableGreens sets the "greens" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableGreens(o *orderitem.Greens) *OrderItemUpdateOne {
	if o != nil {
		oiuo.SetGreens(*o)
	}
	return oiuo
}

// SetScallion sets the "scallion" field.
func (oiuo *OrderItemUpdateOne) SetScallion(o orderitem.Scallion) *OrderItemUpdateOne {
	oiuo.mutation.SetScallion(o)
	return oiuo
}

// SetNillableScallion sets the "scallion" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableScallion(o *orderitem.Scallion) *OrderItemUpdateOne {
	if o != nil {
		oiuo.SetScallion(*o)
	}
	return oiuo
}

// SetPepper sets the "pepper" field.
func (oiuo *OrderItemUpdateOne) SetPepper(o orderitem.Pepper) *OrderItemUpdateOne {
	oiuo.mutation.SetPepper(o)
	return oiuo
}

// SetNillablePepper sets the "pepper" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillablePepper(o *orderitem.Pepper) *OrderItemUpdateOne {
	if o != nil {
		oiuo.SetPepper(*o)
	}
	return oiuo
}

// SetDiningMethod sets the "dining_method" field.
func (oiuo *OrderItemUpdateOne) SetDiningMethod(om orderitem.DiningMethod) *OrderItemUpdateOne {
	oiuo.mutation.SetDiningMethod(om)
	return oiuo
}

// SetNillableDiningMethod sets the "dining_method" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDiningMethod(om *orderitem.DiningMethod) *OrderItemUpdateOne {
	if om != nil {
		oiuo.SetDiningMethod(*om)
	}
	return oiuo
}

// SetPackaging sets the "packaging" field.
func (oiuo *OrderItemUpdateOne) SetPackaging(o orderitem.Packaging) *OrderItemUpdateOne {
	oiuo.mutation.SetPackaging(o)
	return oiuo
}

// SetNillablePackaging sets the "packaging" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillablePackaging(o *orderitem.Packaging) *OrderItemUpdateOne {
	if o != nil {
		oiuo.SetPackaging(*o)
	}
	return oiuo
}

// SetPackagingMethod sets the "packaging_method" field.
func (oiuo *OrderItemUpdateOne) SetPackagingMethod(om orderitem.PackagingMethod) *OrderItemUpdateOne {
	oiuo.mutation.SetPackagingMethod(om)
	return oiuo
}

// SetNillablePackagingMethod sets the "packaging_method" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillablePackagingMethod(om *orderitem.PackagingMethod) *OrderItemUpdateOne {
	if om != nil {
		oiuo.SetPackagingMethod(*om)
	}
	return oiuo
}

// SetNote sets the "note" field.
func (oiuo *OrderItemUpdateOne) SetNote(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetNote(s)
	return oiuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableNote(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetNote(*s)
	}
	return oiuo
}

// SetPrice sets the "price" field.
func (oiuo *OrderItemUpdateOne) SetPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetPrice()
	oiuo.mutation.SetPrice(f)
	return oiuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillablePrice(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetPrice(*f)
	}
	return oiuo
}

// AddPrice adds f to the "price" field.
func (oiuo *OrderItemUpdateOne) AddPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddPrice(f)
	return oiuo
}

// SetProgressNoodles sets the "progress_noodles" field.
func (oiuo *OrderItemUpdateOne) SetProgressNoodles(on orderitem.ProgressNoodles) *OrderItemUpdateOne {
	oiuo.mutation.SetProgressNoodles(on)
	return oiuo
}

// SetNillableProgressNoodles sets the "progress_noodles" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProgressNoodles(on *orderitem.ProgressNoodles) *OrderItemUpdateOne {
	if on != nil {
		oiuo.SetProgressNoodles(*on)
	}
	return oiuo
}

// SetProgressMeat sets the "progress_meat" field.
func (oiuo *OrderItemUpdateOne) SetProgressMeat(om orderitem.ProgressMeat) *OrderItemUpdateOne {
	oiuo.mutation.SetProgressMeat(om)
	return oiuo
}

// SetNillableProgressMeat sets the "progress_meat" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProgressMeat(om *orderitem.ProgressMeat) *OrderItemUpdateOne {
	if om != nil {
		oiuo.SetProgressMeat(*om)
	}
	return oiuo
}

// SetCompletedAt sets the "completed_at" field.
func (oiuo *OrderItemUpdateOne) SetCompletedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetCompletedAt(t)
	return oiuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCompletedAt(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetCompletedAt(*t)
	}
	return oiuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (oiuo *OrderItemUpdateOne) ClearCompletedAt() *OrderItemUpdateOne {
	oiuo.mutation.ClearCompletedAt()
	return oiuo
}

// SetCreatedAt sets the "created_at" field.
func (oiuo *OrderItemUpdateOne) SetCreatedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetCreatedAt(t)
	return oiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetCreatedAt(*t)
	}
	return oiuo
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiuo *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return oiuo.mutation
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiuo *OrderItemUpdateOne) Where(ps ...predicate.OrderItem) *OrderItemUpdateOne {
	oiuo.mutation.Where(ps...)
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderItemUpdateOne) Select(field string, fields ...string) *OrderItemUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderItem entity.
func (oiuo *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	return withHooks(ctx, oiuo.sqlSave, oiuo.mutation, oiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OrderItemUpdateOne) check() error {
	if v, ok := oiuo.mutation.NoodleType(); ok {
		if err := orderitem.NoodleTypeValidator(v); err != nil {
			return &ValidationError{Name: "noodle_type", err: fmt.Errorf(`ent: validator failed for field "OrderItem.noodle_type": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.NoodleAmount(); ok {
		if err := orderitem.NoodleAmountValidator(v); err != nil {
			return &ValidationError{Name: "noodle_amount", err: fmt.Errorf(`ent: validator failed for field "OrderItem.noodle_amount": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.Size(); ok {
		if err := orderitem.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "OrderItem.size": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.Greens(); ok {
		if err := orderitem.GreensValidator(v); err != nil {
			return &ValidationError{Name: "greens", err: fmt.Errorf(`ent: validator failed for field "OrderItem.greens": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.Scallion(); ok {
		if err := orderitem.ScallionValidator(v); err != nil {
			return &ValidationError{Name: "scallion", err: fmt.Errorf(`ent: validator failed for field "OrderItem.scallion": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.Pepper(); ok {
		if err := orderitem.PepperValidator(v); err != nil {
			return &ValidationError{Name: "pepper", err: fmt.Errorf(`ent: validator failed for field "OrderItem.pepper": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.DiningMethod(); ok {
		if err := orderitem.DiningMethodValidator(v); err != nil {
			return &ValidationError{Name: "dining_method", err: fmt.Errorf(`ent: validator failed for field "OrderItem.dining_method": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.Packaging(); ok {
		if err := orderitem.PackagingValidator(v); err != nil {
			return &ValidationError{Name: "packaging", err: fmt.Errorf(`ent: validator failed for field "OrderItem.packaging": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.PackagingMethod(); ok {
		if err := orderitem.PackagingMethodValidator(v); err != nil {
			return &ValidationError{Name: "packaging_method", err: fmt.Errorf(`ent: validator failed for field "OrderItem.packaging_method": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.ProgressNoodles(); ok {
		if err := orderitem.ProgressNoodlesValidator(v); err != nil {
			return &ValidationError{Name: "progress_noodles", err: fmt.Errorf(`ent: validator failed for field "OrderItem.progress_noodles": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.ProgressMeat(); ok {
		if err := orderitem.ProgressMeatValidator(v); err != nil {
			return &ValidationError{Name: "progress_meat", err: fmt.Errorf(`ent: validator failed for field "OrderItem.progress_meat": %w`, err)}
		}
	}
	return nil
}

func (oiuo *OrderItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderItem, err error) {
	if err := oiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderitem.Table, orderitem.Columns, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64))
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitem.FieldID)
		for _, f := range fields {
			if !orderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.DailyID(); ok {
		_spec.SetField(orderitem.FieldDailyID, field.TypeUint64, value)
	}
	if value, ok := oiuo.mutation.AddedDailyID(); ok {
		_spec.AddField(orderitem.FieldDailyID, field.TypeUint64, value)
	}
	if value, ok := oiuo.mutation.IncludeNoodles(); ok {
		_spec.SetField(orderitem.FieldIncludeNoodles, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.NoodleType(); ok {
		_spec.SetField(orderitem.FieldNoodleType, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.CustomNoodleType(); ok {
		_spec.SetField(orderitem.FieldCustomNoodleType, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.NoodleAmount(); ok {
		_spec.SetField(orderitem.FieldNoodleAmount, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.ExtraNoodleBlocks(); ok {
		_spec.SetField(orderitem.FieldExtraNoodleBlocks, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedExtraNoodleBlocks(); ok {
		_spec.AddField(orderitem.FieldExtraNoodleBlocks, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.Size(); ok {
		_spec.SetField(orderitem.FieldSize, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.CustomSizePrice(); ok {
		_spec.SetField(orderitem.FieldCustomSizePrice, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedCustomSizePrice(); ok {
		_spec.AddField(orderitem.FieldCustomSizePrice, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.MeatAvailable(); ok {
		_spec.SetField(orderitem.FieldMeatAvailable, field.TypeJSON, value)
	}
	if value, ok := oiuo.mutation.AppendedMeatAvailable(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orderitem.FieldMeatAvailable, value)
		})
	}
	if value, ok := oiuo.mutation.MeatExcluded(); ok {
		_spec.SetField(orderitem.FieldMeatExcluded, field.TypeJSON, value)
	}
	if value, ok := oiuo.mutation.AppendedMeatExcluded(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orderitem.FieldMeatExcluded, value)
		})
	}
	if value, ok := oiuo.mutation.Greens(); ok {
		_spec.SetField(orderitem.FieldGreens, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.Scallion(); ok {
		_spec.SetField(orderitem.FieldScallion, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.Pepper(); ok {
		_spec.SetField(orderitem.FieldPepper, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.DiningMethod(); ok {
		_spec.SetField(orderitem.FieldDiningMethod, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.Packaging(); ok {
		_spec.SetField(orderitem.FieldPackaging, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.PackagingMethod(); ok {
		_spec.SetField(orderitem.FieldPackagingMethod, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.Note(); ok {
		_spec.SetField(orderitem.FieldNote, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.Price(); ok {
		_spec.SetField(orderitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedPrice(); ok {
		_spec.AddField(orderitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.ProgressNoodles(); ok {
		_spec.SetField(orderitem.FieldProgressNoodles, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.ProgressMeat(); ok {
		_spec.SetField(orderitem.FieldProgressMeat, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.CompletedAt(); ok {
		_spec.SetField(orderitem.FieldCompletedAt, field.TypeTime, value)
	}
	if oiuo.mutation.CompletedAtCleared() {
		_spec.ClearField(orderitem.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := oiuo.mutation.CreatedAt(); ok {
		_spec.SetField(orderitem.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &OrderItem{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oiuo.mutation.done = true
	return _node, nil
}
