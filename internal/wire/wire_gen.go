// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/dongwlin/legero-backend/internal/app"
	"github.com/dongwlin/legero-backend/internal/config"
	"github.com/dongwlin/legero-backend/internal/handler"
	"github.com/dongwlin/legero-backend/internal/infra"
	"github.com/dongwlin/legero-backend/internal/logic"
	"github.com/dongwlin/legero-backend/internal/pkg/broker"
	"github.com/dongwlin/legero-backend/internal/pkg/dailyid"
	"github.com/dongwlin/legero-backend/internal/pkg/logger"
	"github.com/dongwlin/legero-backend/internal/repo"
	"github.com/dongwlin/legero-backend/internal/server/httpserver"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() (*app.App, error) {
	configConfig := config.New()
	zerologLogger := logger.New(configConfig)
	client, err := infra.NewMySQL(configConfig)
	if err != nil {
		return nil, err
	}
	redisClient, err := infra.NewRedis(configConfig)
	if err != nil {
		return nil, err
	}
	token := repo.NewToken(redisClient)
	user := repo.NewUser(client)
	auth := logic.NewAuth(user, token)
	handlerAuth := handler.NewAuth(auth)
	logicUser := logic.NewUser(user)
	handlerUser := handler.NewUser(logicUser)
	brokerBroker := broker.NewBroker(configConfig)
	dailyIDGenerator := dailyid.New(redisClient)
	orderItem := repo.NewOrderItem(client)
	logicOrderItem := logic.NewOrderItem(dailyIDGenerator, orderItem)
	handlerOrderItem := handler.NewOrderItem(brokerBroker, logicOrderItem)
	sse := handler.NewSSE(brokerBroker)
	httpServer := httpserver.NewHttpServer(configConfig, token, handlerAuth, handlerUser, handlerOrderItem, sse)
	appApp := app.New(configConfig, zerologLogger, client, redisClient, httpServer)
	return appApp, nil
}

// wire.go:

var GlobalSet = wire.NewSet(config.Provider, logger.Provider, infra.Provider, dailyid.Provider, repo.Provider, logic.Provider)
